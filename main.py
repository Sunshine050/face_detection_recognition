import tkinter as tk
from tkinter import filedialog
from PIL import Image, ImageTk
import cv2
import time
import numpy as np
import os # ‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ os ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏û‡∏≤‡∏ò‡πÉ‡∏ô‡πÇ‡∏°‡∏î‡∏π‡∏•‡∏¢‡πà‡∏≠‡∏¢
import sys

# ‡∏ô‡∏≥‡πÄ‡∏Ç‡πâ‡∏≤‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏à‡∏≤‡∏Å‡πÑ‡∏ü‡∏•‡πå‡∏≠‡∏∑‡πà‡∏ô ‡πÜ ‡πÉ‡∏ô‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡∏Å‡∏ï‡πå
from core.detector import detect_faces 
from core.recognizer import recognize_faces_lbph

# --- ‡∏Ñ‡πà‡∏≤‡∏Ñ‡∏á‡∏ó‡∏µ‡πà/‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ ---
APP_TITLE = "Face Recognition Application (GUI)"
CAMERA_ID = 0 # ID ‡∏Å‡∏•‡πâ‡∏≠‡∏á‡∏´‡∏•‡∏±‡∏Å
UPDATE_DELAY_MS = 15 # ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ñ‡∏µ‡πà‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÄ‡∏ü‡∏£‡∏°‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏•‡πâ‡∏≠‡∏á

class FaceRecognitionApp:
    def __init__(self, master):
        self.master = master
        master.title(APP_TITLE)
        
        # 1. ‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞
        self.cap = None 
        self.is_running_camera = False
        self.prev_frame_time = time.time()

        # 2. ‡∏™‡∏£‡πâ‡∏≤‡∏á Main Frame
        main_frame = tk.Frame(master)
        main_frame.pack(padx=10, pady=10, fill=tk.BOTH, expand=True)

        # 3. ‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏†‡∏≤‡∏û/‡∏ß‡∏¥‡∏î‡∏µ‡πÇ‡∏≠ (Label ‡∏à‡∏∞‡∏Ç‡∏¢‡∏≤‡∏¢‡∏ï‡∏≤‡∏°‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏ó‡∏µ‡πà‡∏°‡∏µ)
        self.video_label = tk.Label(main_frame, text="Select an option to start.", 
                                    bg='black', fg='white', relief=tk.RAISED)
        self.video_label.pack(side=tk.LEFT, padx=10, fill=tk.BOTH, expand=True)
        
        # 4. Control Panel (‡∏õ‡∏∏‡πà‡∏°‡∏ï‡πà‡∏≤‡∏á ‡πÜ)
        control_frame = tk.Frame(main_frame)
        control_frame.pack(side=tk.RIGHT, padx=10, fill=tk.Y)

        # ‡∏õ‡∏∏‡πà‡∏° Start Camera
        self.btn_camera = tk.Button(control_frame, text="üî¥ Start Camera", command=self.start_camera, width=20)
        self.btn_camera.pack(pady=10)
        
        # ‡∏õ‡∏∏‡πà‡∏° Stop Camera
        self.btn_stop = tk.Button(control_frame, text="‚óº Stop Camera", command=self.stop_camera, width=20, state=tk.DISABLED)
        self.btn_stop.pack(pady=10)

        # ‡∏õ‡∏∏‡πà‡∏° Upload Image
        self.btn_upload = tk.Button(control_frame, text="üñºÔ∏è Upload Image", command=self.upload_image, width=20)
        self.btn_upload.pack(pady=10)
        
        # Label ‡πÅ‡∏™‡∏î‡∏á‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞
        self.status_label = tk.Label(control_frame, text="Status: Ready", fg="blue", wraplength=150)
        self.status_label.pack(pady=20, fill=tk.X)

    # --- ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏Ñ‡∏ß‡∏ö‡∏Ñ‡∏∏‡∏° ---

    def start_camera(self):
        """‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏ö‡∏†‡∏≤‡∏û‡∏à‡∏≤‡∏Å‡∏Å‡∏•‡πâ‡∏≠‡∏á‡∏ß‡∏¥‡∏î‡∏µ‡πÇ‡∏≠"""
        if self.is_running_camera:
            return

        self.cap = cv2.VideoCapture(CAMERA_ID)
        if not self.cap.isOpened():
            self.status_label.config(text="Status: ERROR - Cannot open camera", fg="red")
            return

        self.is_running_camera = True
        self.btn_camera.config(state=tk.DISABLED)
        self.btn_stop.config(state=tk.NORMAL)
        self.btn_upload.config(state=tk.DISABLED)
        self.status_label.config(text="Status: Camera Running...", fg="green")
        self.prev_frame_time = time.time()
        self.update_frame() # ‡πÄ‡∏£‡∏¥‡πà‡∏° loop ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÄ‡∏ü‡∏£‡∏°

    def stop_camera(self):
        """‡∏´‡∏¢‡∏∏‡∏î‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏Ç‡∏≠‡∏á‡∏Å‡∏•‡πâ‡∏≠‡∏á"""
        if self.is_running_camera and self.cap:
            self.cap.release()
        
        self.is_running_camera = False
        self.btn_camera.config(state=tk.NORMAL)
        self.btn_stop.config(state=tk.DISABLED)
        self.btn_upload.config(state=tk.NORMAL)
        self.status_label.config(text="Status: Camera Stopped", fg="blue")
        # ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏µ‡∏¢‡∏Å update_frame ‡∏ã‡πâ‡∏≥
        self.master.after_cancel(self._after_id) 

    def upload_image(self):
        """‡∏≠‡∏ô‡∏∏‡∏ç‡∏≤‡∏ï‡πÉ‡∏´‡πâ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå‡∏†‡∏≤‡∏û‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•"""
        if self.is_running_camera:
            self.stop_camera()

        filepath = filedialog.askopenfilename(
            title="Select an Image File",
            filetypes=(("Image files", "*.jpg *.jpeg *.png"), ("All files", "*.*"))
        )
        
        if filepath:
            self.status_label.config(text=f"Status: Processing {os.path.basename(filepath)}", fg="darkorange")
            image = cv2.imread(filepath)
            if image is not None:
                # ‡∏™‡πà‡∏á‡∏†‡∏≤‡∏û‡πÑ‡∏õ‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•
                processed_frame = self._process_frame(image, is_camera=False)
                # ‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡πÉ‡∏ô GUI
                self._display_frame(processed_frame)
                self.status_label.config(text="Status: Image Processed", fg="green")
            else:
                self.status_label.config(text="Status: ERROR - Could not load image", fg="red")
        else:
            self.status_label.config(text="Status: Ready", fg="blue")

    # --- ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡∏†‡∏≤‡∏û‡∏´‡∏•‡∏±‡∏Å ---

    def _process_frame(self, frame, is_camera=True):
        """‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏´‡∏•‡∏±‡∏Å‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö‡πÅ‡∏•‡∏∞‡∏à‡∏î‡∏à‡∏≥‡πÉ‡∏ö‡∏´‡∏ô‡πâ‡∏≤ ‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡πÉ‡∏ô Terminal"""
        
        # ‡∏Å‡∏•‡∏±‡∏ö‡∏†‡∏≤‡∏û‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ï‡∏≠‡∏ô‡πÉ‡∏ä‡πâ‡∏Å‡∏•‡πâ‡∏≠‡∏á‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô
        if is_camera:
            frame = cv2.flip(frame, 1) 
        
        detected_results = detect_faces(frame)
        boxes = [box for (box, conf) in detected_results]
        
        # ‡∏ñ‡πâ‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏û‡∏ö‡πÉ‡∏ö‡∏´‡∏ô‡πâ‡∏≤ ‡πÉ‡∏´‡πâ‡∏ó‡∏≥‡∏Å‡∏≤‡∏£‡∏à‡∏î‡∏à‡∏≥
        if boxes:
            names, lbph_confidences = recognize_faces_lbph(frame, boxes)
        else:
            names = []
            lbph_confidences = []

        
        # --- ‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡πÉ‡∏ô Terminal ---
        if names:
            print("\n--- Detection Results ---")
            for i in range(len(names)):
                name = names[i]
                conf = lbph_confidences[i]
                # LBPH ‡∏Ñ‡πà‡∏≤ Confidence ‡∏¢‡∏¥‡πà‡∏á‡∏ï‡πà‡∏≥‡∏¢‡∏¥‡πà‡∏á‡∏î‡∏µ (0 ‡∏Ñ‡∏∑‡∏≠‡∏ï‡∏£‡∏á‡πÄ‡∏õ‡πä‡∏∞)
                match_status = f"Match: {conf:.2f}" 
                if name != "Unknown":
                     print(f"‚úÖ Found: {name} | Confidence (Lower is better): {conf:.2f}")
                else:
                     print(f"‚ùì Unknown | Confidence: {conf:.2f}")
            print("-------------------------")
        
        # --- ‡∏ß‡∏≤‡∏î‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏•‡∏á‡∏ö‡∏ô‡∏†‡∏≤‡∏û ---
        for i, (x, y, w, h) in enumerate(boxes):
            name = names[i]
            
            text_name = name
            text_lbph_conf = f"Match: {lbph_confidences[i]:.2f}" 
            
            color = (0, 0, 255) if name == "Unknown" else (0, 255, 0) # BGR
            cv2.rectangle(frame, (x, y), (x + w, y + h), color, 2)
            
            # ‡∏û‡∏∑‡πâ‡∏ô‡∏´‡∏•‡∏±‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°
            y_text_bg = y - 40 if y - 40 > 0 else y + 10
            cv2.rectangle(frame, (x, y_text_bg), (x + w, y), color, cv2.FILLED)
            
            cv2.putText(frame, text_name, (x + 6, y - 24), cv2.FONT_HERSHEY_SIMPLEX, 0.6, (255, 255, 255), 1)
            cv2.putText(frame, text_lbph_conf, (x + 6, y - 8), cv2.FONT_HERSHEY_SIMPLEX, 0.6, (255, 255, 255), 1)

        return frame

    def _display_frame(self, frame):
        """‡πÅ‡∏õ‡∏•‡∏á‡πÅ‡∏•‡∏∞‡πÅ‡∏™‡∏î‡∏á‡πÄ‡∏ü‡∏£‡∏°‡∏†‡∏≤‡∏û‡πÉ‡∏ô Tkinter Label ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏õ‡∏£‡∏±‡∏ö‡∏Ç‡∏ô‡∏≤‡∏î"""
        
        # 1. ‡πÅ‡∏õ‡∏•‡∏á BGR (OpenCV) ‡πÄ‡∏õ‡πá‡∏ô RGB
        cv2image = cv2.cvtColor(frame, cv2.COLOR_BGR2RGB)
        
        # 2. ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏±‡∏ö‡∏Ç‡∏ô‡∏≤‡∏î‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡∏†‡∏≤‡∏û‡∏û‡∏≠‡∏î‡∏µ‡∏Å‡∏±‡∏ö‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà Label ‡πÇ‡∏î‡∏¢‡πÑ‡∏°‡πà‡∏ö‡∏¥‡∏î‡πÄ‡∏ö‡∏∑‡∏≠‡∏ô‡∏™‡∏±‡∏î‡∏™‡πà‡∏ß‡∏ô
        img_h, img_w, _ = cv2image.shape
        label_w = self.video_label.winfo_width()
        label_h = self.video_label.winfo_height()

        # ‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏´‡∏≤‡∏£‡∏î‡πâ‡∏ß‡∏¢‡∏®‡∏π‡∏ô‡∏¢‡πå
        if label_w == 1 or label_h == 1: 
             # ‡∏ñ‡πâ‡∏≤ Label ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡πÄ‡∏£‡∏ô‡πÄ‡∏î‡∏≠‡∏£‡πå ‡πÉ‡∏´‡πâ‡πÉ‡∏ä‡πâ‡∏Ç‡∏ô‡∏≤‡∏î‡∏†‡∏≤‡∏û‡πÄ‡∏î‡∏¥‡∏° (‡∏´‡∏£‡∏∑‡∏≠‡∏Ç‡∏ô‡∏≤‡∏î‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô)
             scale_factor = 1 
        else:
             # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏™‡πÄ‡∏Å‡∏•‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡πÉ‡∏ä‡πâ‡∏¢‡πà‡∏≠/‡∏Ç‡∏¢‡∏≤‡∏¢‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡∏†‡∏≤‡∏û‡∏û‡∏≠‡∏î‡∏µ‡πÉ‡∏ô‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà Label
             scale_factor = min(label_w / img_w, label_h / img_h)

        new_w = int(img_w * scale_factor)
        new_h = int(img_h * scale_factor)
        
        # ‡∏õ‡∏£‡∏±‡∏ö‡∏Ç‡∏ô‡∏≤‡∏î‡∏†‡∏≤‡∏û
        cv2image = cv2.resize(cv2image, (new_w, new_h), interpolation=cv2.INTER_AREA)

        # 3. ‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏†‡∏≤‡∏û‡∏ó‡∏µ‡πà Tkinter ‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏à
        img = Image.fromarray(cv2image)
        self.photo = ImageTk.PhotoImage(image=img)
        
        # 4. ‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•
        self.video_label.config(image=self.photo, text="")
        self.video_label.image = self.photo # ‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô GC

    # --- Loop ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏•‡πâ‡∏≠‡∏á ---

    def update_frame(self):
        """Loop ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏î‡∏∂‡∏á‡πÄ‡∏ü‡∏£‡∏°‡∏à‡∏≤‡∏Å‡∏Å‡∏•‡πâ‡∏≠‡∏á‡πÅ‡∏•‡∏∞‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï GUI"""
        if self.is_running_camera and self.cap:
            ret, frame = self.cap.read()
            if ret:
                # 1. ‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡∏†‡∏≤‡∏û 
                processed_frame = self._process_frame(frame, is_camera=True)
                
                # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì FPS
                new_frame_time = time.time()
                fps = 1 / (new_frame_time - self.prev_frame_time)
                self.prev_frame_time = new_frame_time
                cv2.putText(processed_frame, f"FPS: {int(fps)}", (10, 30), cv2.FONT_HERSHEY_SIMPLEX, 1, (0, 0, 255), 2)
                
                # 2. ‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡πÉ‡∏ô GUI
                self._display_frame(processed_frame)
            
            # ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡∏ï‡∏±‡∏ß‡πÄ‡∏≠‡∏á‡∏ã‡πâ‡∏≥‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å‡∏´‡∏ô‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤
            self._after_id = self.master.after(UPDATE_DELAY_MS, self.update_frame)
        
if __name__ == "__main__":
    root = tk.Tk()
    # ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏Ç‡∏ô‡∏≤‡∏î‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏Ç‡∏≠‡∏á‡∏´‡∏ô‡πâ‡∏≤‡∏ï‡πà‡∏≤‡∏á‡∏´‡∏•‡∏±‡∏Å‡πÉ‡∏´‡πâ‡πÉ‡∏´‡∏ç‡πà‡∏Ç‡∏∂‡πâ‡∏ô
    root.geometry("1000x700") 
    app = FaceRecognitionApp(root)
    root.mainloop()